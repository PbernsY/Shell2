Name : Conor Berns


myshell manual

myshell is a simplistic shell written in Python3. It uses custom written commands where specified below in the commands description. 
All other commands entered, if correct, fall back on program invocation. It cannot be used to figure out who dies in season 8 of 
game of thrones or use the force, watch this space for updates however. This may be made available :). 
-------------------------------------------------------------------------------------------------------------------------------------------------
Instantiation:

The shell can be instantiated with no command line arguments which will solicit input from the end user. 

->  python3 myshell.py


Alternatively, the shell can be instantiated with a file 

-> python3 myshell.py FILENAME

Which will run all the commands in the file. 
After the shell has reached the EOF it will close, preserving all files which were modified(if any).
All commands in the file are interpretted and ran EXACTLY the same way as they otherwise would be coming directly from the end user.
-------------------------------------------------------------------------------------------------------------------------------------------------

Operation

The shell interprets and parses' user commands in real time. Any command outlined in the commands section of this manual are executed WITHOUT spawning a process unless the ampersand is present.

ALL commands/programs in this shell are compatable with background execution and I/O redirection. Both of these topics are explained further on 
in the manual.

For commands that invoke programmes, these are forked and execd appropriately. While this shell DOES NOT use any system binaries to execute commands outlined in the spec, system binaries CAN be executed.

The shell also supports background execution of commands, identical to standard UNIX shell.
If the command is entered with an ampersand ("&") at the end of the line, the shell will spawn a process and execute the command. If the 
executable is a Program, a subprocess will be called upon.  
The user will know when the process is finished as the shell will display a process id and the output(if any). More detail of background execution is explained further on in the manual.

-------------------------------------------------------------------------------------------------------------------------------------------------

Commands

Below is a list of all custom written commands in the shell. The structure is as follows, command : definition, usage: how the commands are used in the shell. Double quotes indicates the argument should be a String. Nothing after the command indicates no arguments are needed. Anything after the command encased in square brackets means an argument which can be of varied type.


echo : displays a line(s) of text to stdout. 

usage: echo String - will display the string. If the string contains consecutive whitespace, this will be deliminated

echo "string" -  will display the string with whitespace preserved if present.
-------------------------------------------------------------------------------------------------------------------------------------------------

cd : Changes the current working directory to target directory if it exists. 

usage:  cd [directory]
If the end user wishes to access a nested directory like the following example: home/tool/calculator, the command would be cd tool/calculator. In other words, to access a nested directory, supply the direct path.
-------------------------------------------------------------------------------------------------------------------------------------------------

clr: Clears the screen of all textual data

usage: clr
-------------------------------------------------------------------------------------------------------------------------------------------------

environ : Lists all the environment strings 

usage: environ 
-------------------------------------------------------------------------------------------------------------------------------------------------

help : Lists the user manual. 

usage: help , will list the essentially pages of the manual. Instantiation, Operation and commands.
help --more , will open the entire manual and it can be navigated by pressing enter.
-------------------------------------------------------------------------------------------------------------------------------------------------

pause: Pauses ALL operation of the shell until ENTER is pressed.

usage: pause
-------------------------------------------------------------------------------------------------------------------------------------------------

quit : Quits the shell, preserving all opened and/or modified files before exiting

usage: quit
-------------------------------------------------------------------------------------------------------------------------------------------------

path : Lists the current working directories PATH.

usage: path
-------------------------------------------------------------------------------------------------------------------------------------------------

alias: changes the functionality of a command to another command. 

usage: alias [target_command] [new_command], this will cause the functionality of the target_command to be applied to the new_command
-------------------------------------------------------------------------------------------------------------------------------------------------

revert: Reverts all aliases back to the original command.

usage: revert

-------------------------------------------------------------------------------------------------------------------------------------------------


I/O redirection


The shell supports I/O redirection. This means simply, you can direct the output of a command to a file. myshell has two symbols reserved for this behaviour.

">" : open the file if it exists, otherwise create the file, and OVERWRITE any data in the file with the output of the command.

">>" : open the file if it exists, otherwise create the file, and APPEND to any data in the file with the output of the command.


Proper use of the two symbols is essential. 
If 100 commands are ran and written to a file using the append symbol and one overwrite symbol is used, 
then all previous content of the file is lost.

Caution should also be used in regards to naming the file. 
The shell will not stop the end user creating files named as integers and/or symbols. This intuitively should be avoided. 

Since the shell will write to a file OR create a file, naming the redirection destination correctly is essential.

dir ../ > test.txt 

dir ../ > Test.txt


Will redirect the output to two totally different files which may yield unsatisfactory results.

-------------------------------------------------------------------------------------------------------------------------------------------------

Background Execution

The shell supports background running of programmes/files.The desired command/program, 
will run in the background until completed.The reserved symbol for this is the ampersand "&". 
Upon completion of the command, the shell immediately returns to the prompt, printing the output (if any) and PID to stdout.
 An example of this can be seen below 

echo  "Hello World" &
-> [2] 8091
   "Hello world"

Background Execution is also compatible with I/O redirection

echo "Hello world" >> File.txt &
contents of File are:
	"Hello world"

Background Execution can be used in conjunction with Program invocation also:

python3 helloworld.py >> Output.txt &

contents of file are:
	"Hello World"


The above command opens the python script in the background and directs output to Output.txt. 

Background execution can be used with commands like help and quit. This is, obviosuly unintuitive, but still possible.

NOTE: For conviency, the process id will NOT be printed to the file.This would clutter up the file with more or less useless information.
-------------------------------------------------------------------------------------------------------------------------------------------------

Environment

The shell has environment variables set as per modus operandi of most shells. The $shell and $PWD variable have been set.
The $shell variable is a constant value, set from the point of execution of the shell. That is, if you run the shell in 
home/reilly/Shell , the $shell variable will remain set to home/reilly/Shell. 

The $PWD variable changes as per the current working directory the user is in. This is originally set to the path of first execution.


Both of these values, as a matter of fact, all shell environment variables can be accessed by typing $[VAR], where VAR is a valid key in the the environ dictionary into the command prompt.
This will display the value of the environment variable.

Essentially, environment variables are set to allow access of command line tools and to let other system tools interact easier. 
